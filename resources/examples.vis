################################################################################
####  'fetch' examples

################
#  Fetch Server Access

# !fs <- JS server: "localhost:2300";
!fs <- JS serverByName: "NodeFetch";

################
#  URLs

!visionUrl <- "http://localhost:9300/vision/api" printNL;
!externalURL <- "https://catalog.data.gov/harvest/object/fab71ee0-1f0f-4f5f-806c-788342f56d8c" printNL;

################
#  Query Expressions

!schemaQuery <- "./resources/schema.vis" asFileContents;
!holdingsQuery <- "./resources/holdings.vis" asFileContents;

################
#  URL / URLSearchParams Creation
#
#  See the following for why we may need to care...
#
#    https://www.npmjs.com/package/node-fetch#post-with-form-parameters
#
#    https://nodejs.org/api/url.html
#
#    https://nodejs.org/api/url.html#url_class_urlsearchparams
#

!urlsp <- fs global get: [^self :URLSearchParams \.new];
!vurl  <- fs global get: [^self :URL \.new: ^my visionUrl];

################
#  Holdings Query Body

!body <- fs newObject
   set: "expression" to: holdingsQuery.
   set: "classId"    to: "Account".
   set: "id"         to: "SP50".
;

################
#  Holdings Query Options

!options <- fs newObject
  set: "method"  to: "post".
  set: "headers" to: (body newObject set: "Content-Type" to: "application/json").
  set: "body"    to: (body global get: [JSON stringify: ^my body jsParam]).
;

################
#  Holdings Query Three Ways

!r1b <- [ fs fetchJSON: body from: visionUrl. do: [^self get: [await status]. printNL] ] printNL;
!r2b <- [ fs fetchJSONFrom: visionUrl withOptions: options. do: [^self get: [await status]. printNL] ] printNL;
!r3b <- [ fs fetchFrom: visionUrl withOptions: options. do: [^self get: [await status]. printNL] ] printNL;

!rbs <- r1b,r2b,r3b;

################
#  breakIt
^self defineMethod: [ | breakIt |
    10,10 do: [^my r2 get: [ result holdings ]. get: ^self. display];
];

^self defineMethod: [ | breakItNot |
    10,10 do: [^my r2 get: [ ^self result holdings ]. get: ^self. display];
];
